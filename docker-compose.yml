version: "3.9"  # optional since v1.27.0 # con docker host.docker.internal
services: 
  #base de datos mysql
  db:
    image: mysql
    restart: always
    environment:
        MYSQL_ROOT_PASSWORD: root
        MYSQL_DB: dan2021
    volumes:
      - ./mysql:/var/lib/mysql/data
      - ./mysql/SCHEMAS.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - '3306:3306'
    networks:
      - infra
      - app       
  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      - infra
  #cola artemis
  artemis:
    container_name: artemis
    build:
      context: ./artemis
      dockerfile: Dockerfile
    ports:
      - 6003:8161
    restart: always
    networks:
      - infra
      - app
  #MICROSERVICIOS
  #ms-usuarios
  ms-usuarios:
    container_name: usuario
    build:
      context: ./src/usuario
      dockerfile: Dockerfile
    ports:
      - 9000:9000
    restart: always
    networks:
      - app
    depends_on:
      - db
  #ms-pedidos
  ms-pedidos:
    container_name: pedidos
    build:
      context: ./src/pedidos
      dockerfile: Dockerfile
    ports:
      - 9002:9002
    restart: always
    networks:
      - app
    depends_on:
      - db
  #ms-productos
  ms-productos:
    container_name: productos
    build:
      context: ./src/productos
      dockerfile: Dockerfile
    ports:
      - 9001:9001
    restart: always
    networks:
      - app
    depends_on:
      - db
  #ms-cuentacorriente
  ms-cuentacorriente:
    container_name: cuentacorriente
    build:
      context: ./src/cuentacorriente
      dockerfile: Dockerfile
    ports:
      - 9003:9003
    restart: always
    networks:
      - app
    depends_on:
      - db
  #API-Gateway
  zuul-api-gateway:
    container_name: zuul-api-gateway
    build:
      context: ./src/zuul-api-gateway
      dockerfile: Dockerfile
    ports:
      - 8765:8765
    restart: always
    networks:
      - app
    depends_on:
      - db
  #EUREKA
  eureka-service:
    container_name: eureka-service
    build:
      context: ./src/eureka-service
      dockerfile: Dockerfile
    ports:
      - 8761:8761
    restart: always
    networks:
      - app
    depends_on:
      - db
  #RIBBON
  ribbon-service:
    container_name: ribbon-service
    build:
      context: ./src/eureka-service
      dockerfile: Dockerfile
    ports:
      - 8181:8181
    restart: always
    networks:
      - app
    depends_on:
      - db
  #SERVICIO GRAFANA
  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - 3000:3000
    restart: always
    networks:
      - app
      - infra
  #KEYCLOAK
  postgres:
    image: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    networks:
      - app
      - infra
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    volumes:
      - ./keycloak:/opt/jboss/keycloak/imports
    command:
      - "-b 0.0.0.0 -Dkeycloak.import=/opt/jboss/keycloak/imports/realm-export.json"
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_SCHEMA: public
      DB_PASSWORD: password
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: Pa55w0rd
    ports:
      - 6080:8080
    depends_on:
      - postgres
    networks:
      - app
      - infra
  #PROMETHEUS
  prometheus:
    container_name: prometheus
    image: prom/prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    networks:
      - app
      - infra
volumes:
  postgres_data:
    driver: local
networks:
    infra:
        driver: bridge
    app:
        driver: bridge    